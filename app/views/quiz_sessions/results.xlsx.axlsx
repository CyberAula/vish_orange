#Config
xlsx_package.use_autowidth = false

#Init
wb = xlsx_package.workbook

#Style
header_style = wb.styles.add_style :bg_color => "CCC",
:b => true,
:border => { :style => :thin, :color => "00" },
:alignment => { :horizontal => :center, :vertical => :center, :wrap_text => false}

odd_row_style = wb.styles.add_style :bg_color => "FFF",
:border => { :style => :thin, :color => "00" },
:alignment => { :horizontal => :center, :vertical => :center , :wrap_text => false}

even_row_style = wb.styles.add_style :bg_color => "FFF",
:border => { :style => :thin, :color => "00" },
:alignment => { :horizontal => :center, :vertical => :center , :wrap_text => false}


#WorkSheet content

wb.add_worksheet(:name => "QuizSessionResults_" + @quiz_session.id.to_s) do |sheet|

	rowContents = [];
	rowContents[0] = ["Quiz Session Name", (@quiz_session.name or "Untitled")]
	rowContents[1] = ["Id", @quiz_session.id.to_s]
	rowContents[2] = ["Author", current_subject.name]
	rowContents[3] = [t('quiz.createdAt').capitalize, @quiz_session.created_at.to_s]
	rowContents[4] = [t('quiz.closedAt').capitalize, @quiz_session.active==false ? @quiz_session.closed_at.to_s : "-"]
	rowContents[5] = [t('quiz.launchIn').capitalize, @processedQS["presentationName"]]
	rowContents[6] = ["Quiz Type", @processedQS["quizType"]]
	rowContents[7] = ["", ""]
	rowContents[8] = ["Question", @processedQS["question"]]

	columnLength = 2
	rowContentsIndex = rowContents.length

	case @processedQS["quizType"]
	when "multiplechoice"
		rowContents[rowContentsIndex] = ["Choices", "Choices Value", "Responses"]
		multipleAnswer = @processedQS["extras"] && @processedQS["extras"]["multipleAnswer"]==true
		includePercentage = !multipleAnswer
		if includePercentage
			rowContents[rowContentsIndex].push("Percentage")
		end
		rowContentsIndex = rowContentsIndex + 1

		@processedQS["choices"].each_with_index do |choice,index|
			rowContents[rowContentsIndex] = [(index+97).chr, choice["value"],@processedQS["processedResults"][index]["n"]]
			if includePercentage
				rowContents[rowContentsIndex].push(@processedQS["processedResults"][index]["percentage"].to_s+"%")
			end
			rowContentsIndex = rowContentsIndex + 1
		end

		if @processedQS["totalAnswers"] && !multipleAnswer
			rowContents[rowContentsIndex] = [t('quiz.total'),"",@processedQS["totalAnswers"],""]
			rowContentsIndex = rowContentsIndex + 1
		end
		columnLength = 4

	when  "truefalse"
		rowContents[rowContentsIndex] = ["Choices", "Choices Value", t('quiz.trueL').capitalize, "", t('quiz.falseL').capitalize, ""]
		rowContentsIndex = rowContentsIndex + 1
		@processedQS["choices"].each_with_index do |choice,index|
			if choice["value"]
				rowContents[rowContentsIndex] = [(index+97).chr, choice["value"],@processedQS["processedResults"][index]["T"],@processedQS["processedResults"][index]["Tpercentage"].to_s + "%",@processedQS["processedResults"][index]["F"],@processedQS["processedResults"][index]["Fpercentage"].to_s + "%"]
			end
			rowContentsIndex = rowContentsIndex + 1
		end
		columnLength = 6

	when "sorting"
		rowContents[rowContentsIndex] = ["Choices", "Choices Value"]
		rowContentsIndex = rowContentsIndex + 1

		@processedQS["choices"].each_with_index do |choice,index|
			rowContents[rowContentsIndex] = [index+1, choice["value"]]
			rowContentsIndex = rowContentsIndex + 1
		end

		if @processedQS["processedResults"][0] and @processedQS["processedResults"][1]
			rowContents[rowContentsIndex] = ["", ""]
			rowContentsIndex = rowContentsIndex + 1

			rowContents[rowContentsIndex] = ["","Responses","Percentage"]
			rowContentsIndex = rowContentsIndex + 1

			rowContents[rowContentsIndex] = [t('quiz.correctResponses'),@processedQS["processedResults"][0],@processedQS["processedResults"][2]]
			rowContentsIndex = rowContentsIndex + 1
			rowContents[rowContentsIndex] = [t('quiz.incorrectResponses'),@processedQS["processedResults"][1],@processedQS["processedResults"][3]]
			rowContentsIndex = rowContentsIndex + 1
			if @processedQS["totalAnswers"]
				rowContents[rowContentsIndex] = [t('quiz.total'),@processedQS["totalAnswers"],""]
				rowContentsIndex = rowContentsIndex + 1
			end
		end

		columnLength = 4
	when "openAnswer"
		rowContents[rowContentsIndex] = ["Responses"]
		rowContentsIndex = rowContentsIndex + 1

		@quiz_session.results.each do |result|
			result = JSON(result["answer"])
			#Result is an array of responses
			result.each do |response|
				if response["answer"]
					rowContents[rowContentsIndex] = [response["answer"]]
					rowContentsIndex = rowContentsIndex + 1
				end
			end
		end
	else
		#Quiz not recognized
	end

	rowContents.each_with_index do |rowContent,index|
		style = odd_row_style
		if index==0
			style = header_style
		elsif index%2==0
			style = even_row_style
		end
		sheet.add_row(rowContent, :style => style)
	end

	#Automatically set the column width to fit content
	#It seems that xlsx_package.use_autowidth = true is not working very well...

	columnContents = []
	columnLength.times do |i|
		columnContents[i] = []
	end

	rowContents.each_with_index do |rowContent,index|
		rowContent.each_with_index do |value,cIndex|
			if columnContents[cIndex]
				columnContents[cIndex] << value
			end
		end
	end

	columnWidths = []
	columnContents.each_with_index do |columnContent,index|
		columnContent.each do |content|
			unless content.nil?
				if columnWidths[index].nil?
					columnWidths[index] = content.to_s.length + 5
				else
					columnWidths[index] = [columnWidths[index],content.to_s.length + 5].max
				end
			end
		end		
	end

	#Filter extreme wider columns
	columnWidths.each_with_index do |columnWidth,index|
		columnWidths[index] = [columnWidth,125].min
	end

	sheet.column_info.each_with_index do |cInfo,index|
		sheet.column_info[index].width = columnWidths[index]
	end
end
